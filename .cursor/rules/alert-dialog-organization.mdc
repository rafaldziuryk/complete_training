---
globs: *.dart
alwaysApply: true
---
# Alert Dialog Organization Rules

## Alert Dialog Classes in Separate Files

### Dialog File Structure
- Each dialog should be in its own file as a reusable widget class
- Dialog files should be named using snake_case ending with `_dialog.dart`
- Place dialogs in `widgets/dialogs/` directory within the appropriate feature
- Use descriptive names that indicate the dialog's purpose

### Dialog Organization Guidelines
- **Confirmation Dialogs**: Extract into reusable confirmation dialog classes
- **Form Dialogs**: Create separate dialog classes for data input
- **Info Dialogs**: Standardize informational dialogs with consistent styling
- **Custom Dialogs**: Complex dialogs should have their own widget files

### Example Structure
```
lib/features/company/presentation/widgets/dialogs/
├── award_creation_dialog.dart
├── company_deletion_confirmation_dialog.dart
├── stamp_input_dialog.dart
└── qr_scanner_dialog.dart
```

### Dialog Class Guidelines
- Extend `StatefulWidget` or `StatelessWidget` as appropriate
- Use descriptive class names ending with `Dialog` (e.g., `AwardCreationDialog`)
- Accept required parameters through constructor
- Return the dialog widget from `build()` method
- Include proper error handling and validation

### Dialog Usage Pattern
```dart
// In the main screen file
void _showAwardDialog() {
  showDialog(
    context: context,
    builder: (context) => AwardCreationDialog(
      companyId: widget.companyId,
      onAwardCreated: _handleAwardCreated,
    ),
  );
}
```

### Example Dialog Class Structure
```dart
class AwardCreationDialog extends StatefulWidget {
  final String companyId;
  final Function(AwardEntity) onAwardCreated;
  
  const AwardCreationDialog({
    super.key,
    required this.companyId,
    required this.onAwardCreated,
  });
  
  @override
  State<AwardCreationDialog> createState() => _AwardCreationDialogState();
}
```

### When to Extract Dialogs
- Dialog logic exceeds 50 lines
- Dialog is used in multiple locations
- Dialog contains complex form validation
- Dialog has multiple states or interactions
- Dialog clutters the main screen file

### Dialog Import Organization
- Import dialog widgets using absolute paths
- Group dialog imports together
- Place after Flutter/package imports but before other custom widgets
