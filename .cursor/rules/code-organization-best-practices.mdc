---
globs: *.dart
alwaysApply: true
---
# Code Organization Best Practices

## File Size and Complexity Management

### File Size Guidelines
- **Screen Files**: Maximum 500 lines (split into widgets if exceeded)
- **Widget Files**: Maximum 200 lines (extract sub-widgets if needed)
- **Dialog Files**: Maximum 150 lines (break into components if necessary)
- **Service Files**: Maximum 300 lines (split by functionality)
- **Repository Files**: Maximum 250 lines (separate by data operations)

### Code Splitting Strategies
1. **Horizontal Splitting**: Separate by feature/responsibility
2. **Vertical Splitting**: Extract reusable components
3. **Functional Splitting**: Group related methods into separate classes

### Widget Composition Patterns
```dart
// Instead of one large widget
class LargeScreen extends StatefulWidget {
  // 500+ lines of code
}

// Split into multiple focused widgets
class MainScreen extends StatefulWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(),
      body: Column(
        children: [
          HeaderSection(),
          ContentSection(),
          FooterSection(),
        ],
      ),
    );
  }
}
```

## Widget State Management Guidelines

### setState Usage Restrictions

**CRITICAL RULE**: `setState()` should **ONLY** be used for UI-specific animations and local UI state. **NEVER** use `setState()` for business data or loading states.

### Allowed setState Usage
```dart
class _MyWidgetState extends State<MyWidget> with TickerProviderStateMixin {
  // ✅ ALLOWED: Animation controllers
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  
  // ✅ ALLOWED: UI-only state (page indices, selected tabs, etc.)
  int _currentPageIndex = 0;
  int _selectedTabIndex = 0;
  
  // ✅ ALLOWED: Form field focus and validation UI state
  bool _isPasswordVisible = false;
  bool _isFormValid = false;
  
  // ✅ ALLOWED: Local UI interactions
  bool _isExpanded = false;
  bool _isHovered = false;

  void _onPageChanged(int index) {
    setState(() {
      _currentPageIndex = index; // ✅ UI-only state
    });
  }

  void _togglePasswordVisibility() {
    setState(() {
      _isPasswordVisible = !_isPasswordVisible; // ✅ UI-only state
    });
  }

  void _startAnimation() {
    setState(() {
      _animationController.forward(); // ✅ Animation control
    });
  }
}
```

### Prohibited setState Usage
```dart
class _BadExampleState extends State<BadExample> {
  // ❌ FORBIDDEN: Business data storage
  List<UserEntity> _users = [];
  CompanyEntity? _currentCompany;
  
  // ❌ FORBIDDEN: Loading states (use BLoC instead)
  bool _isLoading = false;
  bool _isSubmitting = false;
  
  // ❌ FORBIDDEN: Error states (use BLoC instead)
  String? _errorMessage;
  bool _hasError = false;
  
  // ❌ FORBIDDEN: API response data
  Map<String, dynamic>? _apiResponse;

  // ❌ FORBIDDEN: Business logic state management
  void _loadUsers() async {
    setState(() {
      _isLoading = true; // ❌ Use BLoC instead
    });
    
    final users = await userRepository.getUsers();
    setState(() {
      _users = users; // ❌ Use BLoC instead
      _isLoading = false; // ❌ Use BLoC instead
    });
  }
}
```

### Correct BLoC Pattern Instead
```dart
class _CorrectExampleState extends State<CorrectExample> {
  // ✅ ONLY UI-specific state in widget
  int _currentPageIndex = 0;
  
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      builder: (context, state) {
        // ✅ Get business data from BLoC
        final users = state is UserLoaded ? state.users : <UserEntity>[];
        final isLoading = state is UserLoading;
        final errorMessage = state is UserError ? state.message : null;
        
        return Column(
          children: [
            if (isLoading) CircularProgressIndicator(),
            if (errorMessage != null) Text('Error: $errorMessage'),
            ...users.map((user) => UserTile(user: user)),
            PageIndicator(
              currentIndex: _currentPageIndex, // ✅ UI-only state
              onPageChanged: (index) {
                setState(() {
                  _currentPageIndex = index; // ✅ Allowed setState usage
                });
              },
            ),
          ],
        );
      },
    );
  }
}
```

### setState Violation Detection
Watch out for these patterns that indicate setState misuse:

```dart
// ❌ VIOLATIONS:
setState(() {
  _data = response.data;           // Business data
  _isLoading = false;             // Loading state
  _error = null;                  // Error state
  _users.add(newUser);            // Business data mutation
  _currentUser = updatedUser;     // Business entity
});

// ✅ CORRECT PATTERNS:
setState(() {
  _currentIndex = newIndex;       // UI navigation state
  _isExpanded = !_isExpanded;     // UI interaction state
  _animationController.forward(); // Animation control
});
```

### State Management Architecture Summary
- **BLoC**: Business data, loading states, error states, API responses
- **setState**: Animations, UI interactions, local form state, navigation indices
- **Provider/InheritedWidget**: Cross-widget UI state (themes, localization)
- **StatefulWidget local variables**: Temporary UI calculations, controllers

## Dependency Injection (DI) Architecture

**See dedicated rule:** [dependency-injection-architecture.mdc](mdc:dependency-injection-architecture.mdc)

All DI-related requirements, patterns, and best practices are documented in the dedicated dependency injection rule.

## Export Files for Import Management

### Feature Export Files
Each feature **MUST** have export files to simplify imports:

```dart
// lib/features/auth/di/auth_exports.dart
// Domain exports
export 'package:stamp/features/auth/domain/entities/user_entity.dart';
export 'package:stamp/features/auth/domain/repositories/auth_repository.dart';
export 'package:stamp/features/auth/domain/services/auth_service.dart';
export 'package:stamp/features/auth/domain/usecases/login_use_case.dart';
export 'package:stamp/features/auth/domain/usecases/logout_use_case.dart';
export 'package:stamp/features/auth/domain/usecases/register_use_case.dart';

// Presentation exports
export 'package:stamp/features/auth/presentation/bloc/auth_bloc.dart';
export 'package:stamp/features/auth/presentation/bloc/auth_event.dart';
export 'package:stamp/features/auth/presentation/bloc/auth_state.dart';
export 'package:stamp/features/auth/presentation/pages/login_screen.dart';
export 'package:stamp/features/auth/presentation/pages/register_screen.dart';

// Data exports (if needed externally)
export 'package:stamp/features/auth/data/models/user_model.dart';
```

### Layer-Specific Export Files
```dart
// lib/features/auth/auth_domain.dart
export 'domain/entities/user_entity.dart';
export 'domain/repositories/auth_repository.dart';
export 'domain/services/auth_service.dart';
export 'domain/usecases/check_auth_status_use_case.dart';
export 'domain/usecases/login_use_case.dart';
export 'domain/usecases/logout_use_case.dart';
export 'domain/usecases/register_use_case.dart';

// lib/features/auth/auth_presentation.dart
export 'presentation/bloc/auth_bloc.dart';
export 'presentation/bloc/auth_event.dart';
export 'presentation/bloc/auth_state.dart';
export 'presentation/pages/login_screen.dart';
export 'presentation/pages/register_screen.dart';
```

### Core Export Files
```dart
// lib/core/core_exports.dart
export 'package:stamp/core/base/use_case.dart';
export 'package:stamp/core/config/supabase_config.dart';
export 'package:stamp/core/di/service_locator.dart';
export 'package:stamp/core/routing/app_router.dart';
export 'package:stamp/core/theme/app_theme.dart';
export 'package:stamp/core/utils/app_logger.dart';
```

### Import Usage with Export Files
```dart
// Instead of multiple imports
import 'package:stamp/features/auth/domain/entities/user_entity.dart';
import 'package:stamp/features/auth/domain/usecases/login_use_case.dart';
import 'package:stamp/features/auth/presentation/bloc/auth_bloc.dart';

// Use single export import
import 'package:stamp/features/auth/di/auth_exports.dart';

// Or layer-specific imports
import 'package:stamp/features/auth/auth_domain.dart';
import 'package:stamp/features/auth/auth_presentation.dart';
```

### Directory Structure for Widgets
```
lib/features/[feature]/presentation/
├── pages/
│   └── main_screen.dart
├── widgets/
│   ├── sections/
│   │   ├── header_section.dart
│   │   ├── content_section.dart
│   │   └── footer_section.dart
│   ├── dialogs/
│   │   ├── confirmation_dialog.dart
│   │   └── input_dialog.dart
│   └── cards/
│       ├── info_card.dart
│       └── action_card.dart
```

### Refactoring Triggers
- Method exceeds 50 lines
- Class has more than 10 methods
- File has more than 5 classes
- Nested widgets exceed 3 levels deep
- Code duplication across multiple files
- Missing DI setup for new features
- More than 5 individual imports from the same feature

### Component Naming Conventions
- **Screens**: `[feature_name]_screen.dart`
- **Widgets**: `[purpose]_widget.dart` or `[purpose]_card.dart`
- **Dialogs**: `[purpose]_dialog.dart`
- **Sections**: `[section_name]_section.dart`
- **Forms**: `[form_name]_form.dart`
- **DI Modules**: `[feature_name]_module.dart`
- **DI Locators**: `[feature_name]_locator.dart`
- **Export Files**: `[feature_name]_exports.dart`

### Import Organization in Split Files
```dart
// Flutter imports
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

// Package imports
import 'package:go_router/go_router.dart';

// Project imports - Core
import 'package:stamp/core/core_exports.dart';

// Project imports - Features (using export files)
import 'package:stamp/features/auth/di/auth_exports.dart';
import 'package:stamp/features/profile/di/profile_exports.dart';

// Project imports - Local widgets
import '../widgets/sections/profile_header.dart';
import '../widgets/sections/profile_actions.dart';
```

## File Creation and Maintenance Workflow

### Export File Updates (MANDATORY)
**CRITICAL**: After creating ANY new file in a feature, the corresponding export files **MUST** be updated immediately:

```dart
// When creating a new file: lib/features/auth/domain/usecases/reset_password_use_case.dart
// IMMEDIATELY update: lib/features/auth/di/auth_exports.dart

// Add to auth_exports.dart:
export 'package:stamp/features/auth/domain/usecases/reset_password_use_case.dart';

// Also update layer-specific export if it exists:
// lib/features/auth/auth_domain.dart
export 'domain/usecases/reset_password_use_case.dart';
```

### DI Configuration Updates (MANDATORY)
**CRITICAL**: See [dependency-injection-architecture.mdc](mdc:dependency-injection-architecture.mdc) for complete DI rules and registration patterns.

### File Creation Checklist
When creating a new file, follow this mandatory checklist:

#### For ALL Files:
1. ✅ Create the file with proper naming convention
2. ✅ Update feature export file (`[feature]_exports.dart`)
3. ✅ Update layer-specific export file if applicable
4. ✅ Update core export file if it's a core module

#### For DI-Required Files (non-pages/widgets):
5. ✅ Register in DI module with correct type (see [dependency-injection-architecture.mdc](mdc:dependency-injection-architecture.mdc))
6. ✅ Update dependent registrations (e.g., add to BLoC constructor)
7. ✅ Verify registration order follows best practices
8. ✅ Test DI configuration works

### Common Mistakes to Avoid
- ❌ Creating files without updating exports
- ❌ Not following DI patterns (see [dependency-injection-architecture.mdc](mdc:dependency-injection-architecture.mdc))
